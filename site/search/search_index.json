{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to the DebounceLib documentation, head to Installation to discover how you can get the library. Already have it? Head over to Getting Started . Why use DebounceLib? DebounceLib allows you to quickly Connect on events that have a specified debounce, these events can also be shared between Scripts of the same class. How to use DebounceLib? Be sure to check on Getting Started and the API-reference in order to understand how to use DebounceLib.","title":"Home"},{"location":"#home","text":"Welcome to the DebounceLib documentation, head to Installation to discover how you can get the library. Already have it? Head over to Getting Started .","title":"Home"},{"location":"#why-use-debouncelib","text":"DebounceLib allows you to quickly Connect on events that have a specified debounce, these events can also be shared between Scripts of the same class.","title":"Why use DebounceLib?"},{"location":"#how-to-use-debouncelib","text":"Be sure to check on Getting Started and the API-reference in order to understand how to use DebounceLib.","title":"How to use DebounceLib?"},{"location":"installation/","text":"Installation There are two main ways to install DebounceLib. A). Take the Model , and insert it into preferably ReplicatedStorage. Then you can require like so: local Lib = require ( game : GetService ( \"ReplicatedStorage\" ). DebounceLib ); B). Require directly with the id: local Lib = require ( 5166541949 );","title":"Installation"},{"location":"installation/#installation","text":"There are two main ways to install DebounceLib. A). Take the Model , and insert it into preferably ReplicatedStorage. Then you can require like so: local Lib = require ( game : GetService ( \"ReplicatedStorage\" ). DebounceLib ); B). Require directly with the id: local Lib = require ( 5166541949 );","title":"Installation"},{"location":"reference/","text":"API-reference Reading this reference is simple, it's very similar to others you've probably seen. For example: Class : Method ( StringParameter : string , OptionalFolderParameter ? : Instance < Folder > ) -> ReturnType Lib.init Lib . init ( Folder ? : Instance < Folder > ) -> DebounceLib Info 'Lib' is what's returned from require()'ing the module, this init method returns the DebounceLib class. DebounceLib:CreateEvent DebounceLib : CreateEvent ( Event : RBXScriptSignal , Time : number , Name ? : string ) -> RBXScriptSignal Tip An RBXScriptSignal, or know as event, has the Connect method so you can directly Connect off of using this method. Also, Name defaults to Event_n, with n changing to how many events are in the current Folder. DebounceLib:GetEvent DebounceLib : GetEvent ( Name : string ) -> RBXScriptSignal Warning Only use GetEvent if you're definitely certain it exists already, if not please use WaitForEvent below. DebounceLib:WaitForEvent DebounceLib : WaitForEvent ( Name : string ) -> RBXScriptSignal DebounceLib:DestroyEvent DebounceLib : DestroyEvent ( Name : string ) -> void Warning Destroying the event disallows you from using it again and Disconnects the Connection. DebounceLib:DestroyAllEvents DebounceLib : DestroyAllEvents () -> void DebounceLib:ResetDebounce DebounceLib : ResetDebounce ( Name : string ) -> void Info This resets the last time it was used so it can be ran immediately again. DebounceLib:ResetAllDebounces DebounceLib : ResetAllDebounces () -> void","title":"API-reference"},{"location":"reference/#api-reference","text":"Reading this reference is simple, it's very similar to others you've probably seen. For example: Class : Method ( StringParameter : string , OptionalFolderParameter ? : Instance < Folder > ) -> ReturnType","title":"API-reference"},{"location":"reference/#libinit","text":"Lib . init ( Folder ? : Instance < Folder > ) -> DebounceLib Info 'Lib' is what's returned from require()'ing the module, this init method returns the DebounceLib class.","title":"Lib.init"},{"location":"reference/#debouncelibcreateevent","text":"DebounceLib : CreateEvent ( Event : RBXScriptSignal , Time : number , Name ? : string ) -> RBXScriptSignal Tip An RBXScriptSignal, or know as event, has the Connect method so you can directly Connect off of using this method. Also, Name defaults to Event_n, with n changing to how many events are in the current Folder.","title":"DebounceLib:CreateEvent"},{"location":"reference/#debouncelibgetevent","text":"DebounceLib : GetEvent ( Name : string ) -> RBXScriptSignal Warning Only use GetEvent if you're definitely certain it exists already, if not please use WaitForEvent below.","title":"DebounceLib:GetEvent"},{"location":"reference/#debouncelibwaitforevent","text":"DebounceLib : WaitForEvent ( Name : string ) -> RBXScriptSignal","title":"DebounceLib:WaitForEvent"},{"location":"reference/#debouncelibdestroyevent","text":"DebounceLib : DestroyEvent ( Name : string ) -> void Warning Destroying the event disallows you from using it again and Disconnects the Connection.","title":"DebounceLib:DestroyEvent"},{"location":"reference/#debouncelibdestroyallevents","text":"DebounceLib : DestroyAllEvents () -> void","title":"DebounceLib:DestroyAllEvents"},{"location":"reference/#debouncelibresetdebounce","text":"DebounceLib : ResetDebounce ( Name : string ) -> void Info This resets the last time it was used so it can be ran immediately again.","title":"DebounceLib:ResetDebounce"},{"location":"reference/#debouncelibresetalldebounces","text":"DebounceLib : ResetAllDebounces () -> void","title":"DebounceLib:ResetAllDebounces"},{"location":"started/","text":"Getting Started From requiring this module you get the 'Lib' object, this has the init method which returns DebounceLib and all of it's methods. Within init you can pass the Folder you want to hold the events inside, otherwise it will create a 'DebounceLib_Events' Folder in ReplicatedStorage. For example with a Folder within this Script: local Lib = require ( game : GetService ( \"ReplicatedStorage\" ). DebounceLib ); local DebounceLib = Lib . init ( script . Folder ); Creating your first event This very simple, and in this example we're going to use Heartbeat but only make it run every 1 second, we'll also name it 'MyEvent'. Then we can Connect directly on the returned event: DebounceLib : CreateEvent ( game : GetService ( \"RunService\" ). Heartbeat , 1 , \"MyEvent\" ): Connect ( function ( DeltaTime ) print ( \"This will only print every 1 second!\" ); end ) Reaching events in other scripts If your Script is the same type as the one you created the event within, you can actually use it in that Script. Be sure to use WaitForEvent as it may not exist yet, but if you are certain then you can use GetEvent. As an example: DebounceLib : WaitForEvent ( \"MyEvent\" ): Connect ( function () print ( \"This too will only print every 1 second!\" ); end ) What next? Be sure to head over to the API-reference to checkout more handy methods. Thank you for using DebounceLib!","title":"Getting Started"},{"location":"started/#getting-started","text":"From requiring this module you get the 'Lib' object, this has the init method which returns DebounceLib and all of it's methods. Within init you can pass the Folder you want to hold the events inside, otherwise it will create a 'DebounceLib_Events' Folder in ReplicatedStorage. For example with a Folder within this Script: local Lib = require ( game : GetService ( \"ReplicatedStorage\" ). DebounceLib ); local DebounceLib = Lib . init ( script . Folder );","title":"Getting Started"},{"location":"started/#creating-your-first-event","text":"This very simple, and in this example we're going to use Heartbeat but only make it run every 1 second, we'll also name it 'MyEvent'. Then we can Connect directly on the returned event: DebounceLib : CreateEvent ( game : GetService ( \"RunService\" ). Heartbeat , 1 , \"MyEvent\" ): Connect ( function ( DeltaTime ) print ( \"This will only print every 1 second!\" ); end )","title":"Creating your first event"},{"location":"started/#reaching-events-in-other-scripts","text":"If your Script is the same type as the one you created the event within, you can actually use it in that Script. Be sure to use WaitForEvent as it may not exist yet, but if you are certain then you can use GetEvent. As an example: DebounceLib : WaitForEvent ( \"MyEvent\" ): Connect ( function () print ( \"This too will only print every 1 second!\" ); end )","title":"Reaching events in other scripts"},{"location":"started/#what-next","text":"Be sure to head over to the API-reference to checkout more handy methods. Thank you for using DebounceLib!","title":"What next?"}]}